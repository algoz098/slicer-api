#!/bin/bash

# Teste de exportação 3MF (produção) com G-code embutido
# - Gera output .gcode.3mf para plate 1 e 2
# - Extrai Metadata/plate_X.gcode do 3MF e compara com arquivos de referência

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CLI_BUILD_DIR="$SCRIPT_DIR/../OrcaSlicerCli/build"
CLI_BIN="$CLI_BUILD_DIR/bin/orcaslicer-cli"
INPUT_3MF="$SCRIPT_DIR/../example_files/3DBenchy.3mf"
OUT_DIR="$SCRIPT_DIR/../output_files"
REF_DIR="$SCRIPT_DIR/../comparable_files"

# Build se necessário
if [ ! -x "$CLI_BIN" ]; then
  echo "✅ Construindo CLI em $CLI_BUILD_DIR ..."
  mkdir -p "$CLI_BUILD_DIR"
  ( cd "$CLI_BUILD_DIR" && /Applications/CMake.app/Contents/bin/cmake -DCMAKE_BUILD_TYPE=Release .. && /Applications/CMake.app/Contents/bin/cmake --build . -j4 )
fi

if [ ! -x "$CLI_BIN" ]; then
  echo "❌ ERRO: Executável não encontrado em $CLI_BIN"
  exit 1
fi

# Verificações iniciais
if [ ! -f "$INPUT_3MF" ]; then
  echo "❌ ERRO: Arquivo de entrada não encontrado: $INPUT_3MF"
  exit 1
fi

mkdir -p "$OUT_DIR"

# Funções auxiliares
extract_header_block() { sed -n '/; HEADER_BLOCK_START/,/; HEADER_BLOCK_END/p' "$1"; }
extract_config_block() { sed -n '/; CONFIG_BLOCK_START/,/; CONFIG_BLOCK_END/p' "$1"; }
extract_gcode_commands() { sed -n '/; CONFIG_BLOCK_END/,$p' "$1" | tail -n +2; }
normalize_header_block() { sed -E '/^; generated by /d; s/^; model label id: .*/; model label id: IGNORED/'; }
normalize_first_printing_object_id() {
  awk '{ if ($0 ~ /^; (printing|stop printing) object .* id:[0-9]+ copy /) { gsub(/id:[0-9]+/, "id:IGNORED"); } print; }'
}

compare_gcodes() {
  local ref="$1"; local gen="$2"; local label="$3";
  local errors=0

  local ref_lines gen_lines
  ref_lines=$(wc -l < "$ref"); gen_lines=$(wc -l < "$gen")
  echo "[$label] Linhas: ref=$ref_lines, out=$gen_lines"
  if [ "$ref_lines" -ne "$gen_lines" ]; then errors=1; fi

  local ref_hdr gen_hdr
  ref_hdr=$(extract_header_block "$ref" | normalize_header_block)
  gen_hdr=$(extract_header_block "$gen" | normalize_header_block)
  if [ "$ref_hdr" != "$gen_hdr" ]; then
    echo "[$label] HEADER_BLOCK difere"
    errors=1
  fi

  local ref_cfg gen_cfg
  ref_cfg=$(extract_config_block "$ref")
  gen_cfg=$(extract_config_block "$gen")
  if [ "$ref_cfg" != "$gen_cfg" ]; then
    echo "[$label] CONFIG_BLOCK difere"
    errors=1
  fi

  local ref_g gen_g
  ref_g=$(extract_gcode_commands "$ref" \
    | sed -E 's/^; start printing object, unique label id: [0-9]+$/; start printing object, unique label id: IGNORED/; s/^; stop printing object, unique label id: [0-9]+$/; stop printing object, unique label id: IGNORED/' \
    | normalize_first_printing_object_id)
  gen_g=$(extract_gcode_commands "$gen" \
    | sed -E 's/^; start printing object, unique label id: [0-9]+$/; start printing object, unique label id: IGNORED/; s/^; stop printing object, unique label id: [0-9]+$/; stop printing object, unique label id: IGNORED/' \
    | normalize_first_printing_object_id)

  local ref_tmp gen_tmp
  ref_tmp=$(mktemp); gen_tmp=$(mktemp)
  echo "$ref_g" > "$ref_tmp"; echo "$gen_g" > "$gen_tmp"
  local first_diff
  first_diff=$(diff -n "$ref_tmp" "$gen_tmp" | head -1 | sed 's/[^0-9]*\([0-9]*\).*/\1/' 2>/dev/null || echo "")
  rm -f "$ref_tmp" "$gen_tmp"
  if [ -n "$first_diff" ]; then
    echo "[$label] G-code difere a partir da linha $first_diff"
    errors=1
  fi

  return $errors
}

STATUS=0

for PLATE in 1 2; do
  OUT_3MF="$OUT_DIR/output_3DBenchy_plate_${PLATE}.gcode.3mf"
  REF_GCODE="$REF_DIR/3DBenchy_plate_${PLATE}.gcode"
  EXTRACTED_GCODE="$OUT_DIR/extracted_plate_${PLATE}.gcode"

  echo "\n==== Exportando 3MF (plate $PLATE) ===="
  rm -f "$OUT_3MF" "$EXTRACTED_GCODE"

  # Executa slice gerando .gcode.3mf (silenciar segfault final se ocorrer)
  set +e
  "$CLI_BIN" slice --input "$INPUT_3MF" --output "$OUT_3MF" --plate "$PLATE" 2>&1
  RET=$?
  set -e
  if [ $RET -ne 0 ]; then
    echo "⚠️  CLI retornou código $RET (pode ser segfault pós-export). Continuando..."
  fi

  if [ ! -f "$OUT_3MF" ]; then
    echo "❌ ERRO: Arquivo 3MF não foi gerado: $OUT_3MF"
    STATUS=1
    continue
  fi

  # Extrair G-code do 3MF
  if ! unzip -p "$OUT_3MF" "Metadata/plate_${PLATE}.gcode" > "$EXTRACTED_GCODE" 2>/dev/null; then
    echo "❌ ERRO: Falha ao extrair Metadata/plate_${PLATE}.gcode de $OUT_3MF"
    STATUS=1
    continue
  fi

  # Comparar com referência
  if [ -f "$REF_GCODE" ]; then
    if compare_gcodes "$REF_GCODE" "$EXTRACTED_GCODE" "3MF plate $PLATE"; then
      echo "✅ [3MF plate $PLATE] G-code embutido idêntico ao de referência (com normalizações permitidas)."
    else
      echo "❌ [3MF plate $PLATE] Diferenças detectadas no G-code embutido."
      STATUS=1
    fi
  else
    echo "⚠️  Arquivo de referência não encontrado: $REF_GCODE. Pulando comparação."
  fi

done

exit $STATUS

