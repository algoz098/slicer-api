// @title Slicer API
// @version 1.0
// @description API REST para processamento de modelos 3D e geração de arquivos G-code
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name MIT
// @license.url https://opensource.org/licenses/MIT

// @host localhost:8080
// @BasePath /api/v1

// @schemes http https

package main

import (
	"os"
	"os/signal"
	"syscall"

	_ "slicer-api/docs" // docs is generated by Swag CLI, you have to import it.
	"slicer-api/internal/config"
	"slicer-api/internal/handlers"
	"slicer-api/internal/middleware"
	"slicer-api/internal/services"
	"slicer-api/pkg/logger"

	"github.com/gin-gonic/gin"
	ginSwagger "github.com/swaggo/gin-swagger"
	swaggerFiles "github.com/swaggo/files"
)

func main() {
	// Carregar configuração
	cfg := config.Load()

	// Inicializar logger
	appLogger := logger.New(&cfg.Logging)

	// Configurar Gin para produção se PORT estiver definido
	if os.Getenv("PORT") != "" {
		gin.SetMode(gin.ReleaseMode)
	}

	// Inicializar serviços
	systemService := services.NewSystemService(appLogger)

	// Inicializar handlers
	systemHandler := handlers.NewSystemHandler(systemService, appLogger)

	// Configurar router
	router := setupRouter(cfg, appLogger, systemHandler)

	// Iniciar servidor
	appLogger.Info("Iniciando servidor", "port", cfg.Server.Port)

	// Configurar graceful shutdown
	go func() {
		if err := router.Run(":" + cfg.Server.Port); err != nil {
			appLogger.Error("Erro ao iniciar servidor", "error", err)
			os.Exit(1)
		}
	}()

	// Aguardar sinal de shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	appLogger.Info("Desligando servidor...")
	// TODO: Implementar graceful shutdown
}

func setupRouter(
	cfg *config.Config,
	logger logger.Logger,
	systemHandler *handlers.SystemHandler,
) *gin.Engine {
	router := gin.New()

	// Middleware globais
	router.Use(middleware.Logger())
	router.Use(middleware.Recovery())
	router.Use(middleware.CORS())
	router.Use(middleware.RequestID())

	// Grupo API v1
	v1 := router.Group("/api/v1")
	{
		// Rotas básicas de sistema
		v1.GET("/health", systemHandler.GetHealth)
		v1.GET("/info", systemHandler.GetSystemInfo)
		v1.GET("/metrics", systemHandler.GetMetrics)
	}

	// Rota raiz
	router.GET("/", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "Slicer API",
			"version": "1.0.0",
			"docs":    "/swagger/index.html",
		})
	})

	// Swagger documentation
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	return router
}
