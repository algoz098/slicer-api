import axios from 'axios'
import * as fs from 'node:fs'
import * as path from 'node:path'
import { app } from '../src/app'
import FormData from 'form-data'

async function main() {
  const server = await app.listen(0)
  try {
    const address = server.address()
    const port = typeof address === 'string' || address === null ? 0 : address.port
    const baseURL = `http://127.0.0.1:${port}`

    const stlPath = path.resolve(__dirname, '../../example_files/3DBenchy.stl')
    if (!fs.existsSync(stlPath)) {
      console.error('Exemplo STL não encontrado em', stlPath)
      process.exit(2)
    }

    const form = new FormData()
    form.append('file', fs.createReadStream(stlPath), {
      filename: '3DBenchy.stl',
      contentType: 'application/sla'
    })

    const resp = await axios.post(`${baseURL}/slicer/stl`, form, {
      headers: form.getHeaders(),
      maxBodyLength: Infinity,
      maxContentLength: Infinity,
      validateStatus: () => true
    })

    if (resp.status !== 201) {
      console.error('Status inesperado:', resp.status, resp.data)
      process.exit(3)
    }

    const data = resp.data
    if (!(data && typeof data === 'object')) {
      console.error('Resposta não é objeto', data)
      process.exit(4)
    }

    if (typeof data.outputPath !== 'string' || !data.outputPath.length) {
      console.error('outputPath ausente', data)
      process.exit(5)
    }

    if (!fs.existsSync(data.outputPath)) {
      console.error('Arquivo de saída não existe no disco:', data.outputPath)
      process.exit(6)
    }

    if (typeof data.gcode !== 'string' || data.gcode.length < 50) {
      console.error('gcode ausente ou muito curto')
      process.exit(7)
    }

    const gcode: string = data.gcode
    const hasCommands = /(\n|^)G\d+|M\d+/.test(gcode)
    const hasHeaderMark = gcode.includes(';') || /; generated by/i.test(gcode)
    if (!(hasCommands || hasHeaderMark)) {
      console.error('Conteúdo não parece G-code')
      process.exit(8)
    }

    console.log('OK: slicing retornou G-code válido em', data.outputPath)
    process.exit(0)
  } catch (err) {
    console.error('Falha no smoke test:', err)
    process.exit(1)
  } finally {
    await app.teardown()
  }
}

main()

