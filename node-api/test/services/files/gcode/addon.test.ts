import assert from 'assert'
import { SlicerCoreFacade } from '../../../../src/services/files/gcode/core/slicer-core'
import type { CoreInput } from '../../../../src/types/slicer'

describe('OrcaSlicer addon integration', () => {
  it('loads the native addon successfully', () => {
    const slicer = new SlicerCoreFacade()
    // Should not throw when creating the facade
    assert.ok(slicer)
  })

  it('generates G-code via addon when available', async () => {
    const slicer = new SlicerCoreFacade()

    const mockInput: CoreInput = {
      threeMfPath: '/tmp/test.3mf',
      profiles: {
        machine: {},
        process: { gcode_flavor: 'marlin', use_relative_e_distances: false },
        filament: {}
      },
      flavor: 'Marlin',
      units: 'mm',
      temperatures: { bed: 60, nozzle: 210 },
      motion: { accel: 10000, jerk: { x: 8, y: 8 } }
    }

    const gcode = await slicer.sliceToGcode(mockInput)
    console.log('Generated G-code sample:', gcode.split('\n').slice(0, 10))

    // Check if addon was loaded
    const hasAddon = (slicer as any).addon !== null
    console.log('Addon loaded:', hasAddon)

    if (hasAddon) {
      // Should contain Orca-style header when addon is available
      assert.ok(gcode.includes('generated by OrcaSlicer Core'))
      assert.ok(gcode.includes('M104') || gcode.includes('M109'))
      assert.ok(gcode.includes('M140') || gcode.includes('M190'))
    }

    // Basic G-code structure should always be present
    assert.ok(gcode.includes('G90'))
    assert.ok(gcode.includes('G21'))
    assert.ok(gcode.includes('M82') || gcode.includes('M83'))
    assert.ok(gcode.includes('G92 E0'))
  })

  it('falls back to TS Writer when addon unavailable', async () => {
    // Create a slicer instance that simulates addon failure
    const slicer = new SlicerCoreFacade()
    // Force addon to null to test fallback
    ;(slicer as any).addon = null
    
    const mockInput: CoreInput = {
      threeMfPath: '/tmp/test.3mf',
      profiles: { machine: {}, process: {}, filament: {} },
      flavor: 'Marlin',
      units: 'mm'
    }

    const gcode = await slicer.sliceToGcode(mockInput)
    
    // Should still generate valid G-code via TS fallback
    assert.ok(gcode.includes('G90'))
    assert.ok(gcode.includes('G21'))
    assert.ok(typeof gcode === 'string')
    assert.ok(gcode.length > 0)
  })
})
