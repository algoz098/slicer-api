import assert from 'assert'
import * as fs from 'fs'
import * as path from 'path'
import { SlicerCoreFacade } from '../../src/services/files/gcode/core/slicer-core'
import { CoreInputBuilder } from '../../src/services/files/gcode/core/core-input-builder'
import { app } from '../../src/app'

describe('Golden Tests - Paridade com OrcaSlicer', () => {
  const fixturesDir = path.join(__dirname, 'fixtures')
  const expectedDir = path.join(__dirname, 'expected')

  // Normaliza G-code para comparação, removendo diferenças triviais
  function normalizeGcode(gcode: string): string {
    return gcode
      .split('\n')
      .map(line => line.trim())
      .filter(line => {
        // Remove comentários de timestamp e versão
        if (line.startsWith('; Generated on') || line.startsWith('; Generated by OrcaSlicer Core')) return false
        if (line.startsWith('; Source:') && line.includes('/tmp/') || line.includes('/var/folders/')) return false
        if (line.includes('temp_') && line.includes('.3mf')) return false
        return line.length > 0
      })
      .join('\n')
  }

  // Cria fixtures de teste se não existirem
  before(async () => {
    if (!fs.existsSync(fixturesDir)) {
      fs.mkdirSync(fixturesDir, { recursive: true })
    }
    if (!fs.existsSync(expectedDir)) {
      fs.mkdirSync(expectedDir, { recursive: true })
    }

    // Cria um fixture básico se não houver nenhum
    const basicFixture = path.join(fixturesDir, 'basic_cube.3mf')
    if (!fs.existsSync(basicFixture)) {
      // Copia um arquivo de teste existente como fixture
      const testFile = path.join(__dirname, '../fixtures/test_3mf.3mf')
      if (fs.existsSync(testFile)) {
        fs.copyFileSync(testFile, basicFixture)
      }
    }
  })

  it('gera G-code compatível com estrutura do OrcaSlicer', async () => {
    const slicer = new SlicerCoreFacade()
    const builder = new CoreInputBuilder(app)

    // Simula um arquivo 3MF básico
    const mockFile = {
      buffer: Buffer.from('mock 3mf content'),
      originalFilename: 'test.3mf'
    }

    const coreInput = await builder.fromUploadedFile(mockFile)
    const gcode = await slicer.sliceToGcode(coreInput)

    // Verifica estrutura básica do G-code
    assert.ok(gcode.includes('G90'), 'Deve conter G90 (absolute positioning)')
    assert.ok(gcode.includes('G21'), 'Deve conter G21 (millimeters)')
    assert.ok(gcode.includes('M82') || gcode.includes('M83'), 'Deve conter M82/M83 (extrusion mode)')
    assert.ok(gcode.includes('G92 E0'), 'Deve conter G92 E0 (reset extruder)')

    // Verifica comandos de temperatura
    assert.ok(gcode.includes('M104') || gcode.includes('M109'), 'Deve conter comando de temperatura do nozzle')
    assert.ok(gcode.includes('M140') || gcode.includes('M190'), 'Deve conter comando de temperatura da bed')

    // Verifica comandos de aceleração
    assert.ok(gcode.includes('M204') || gcode.includes('SET_VELOCITY_LIMIT'), 'Deve conter comando de aceleração')

    // Verifica finalização
    assert.ok(gcode.includes('M104 S0') || gcode.includes('M109 S0'), 'Deve desligar nozzle no final')
    assert.ok(gcode.includes('M140 S0') || gcode.includes('M190 S0'), 'Deve desligar bed no final')

    console.log('G-code structure validation passed')
  })

  it('produz G-code com referências corretas ao código fonte do Orca', async () => {
    const slicer = new SlicerCoreFacade()
    const builder = new CoreInputBuilder(app)

    const mockFile = {
      buffer: Buffer.from('mock 3mf content'),
      originalFilename: 'test.3mf'
    }

    const coreInput = await builder.fromUploadedFile(mockFile)
    const gcode = await slicer.sliceToGcode(coreInput)

    // Verifica se há referências ao código fonte do Orca nos comentários
    const hasOrcaReference = gcode.includes('source_OrcaSlicer') ||
                            gcode.includes('generated by OrcaSlicer Core') ||
                            gcode.includes('Reference:')

    assert.ok(hasOrcaReference, 'G-code deve conter referências ao código fonte do OrcaSlicer')

    console.log('Source reference validation passed')
  })

  // Teste placeholder para quando tivermos fixtures reais
  it.skip('compara com G-code de referência do OrcaSlicer', async () => {
    const fixtures = fs.readdirSync(fixturesDir).filter(f => f.endsWith('.3mf'))
    
    for (const fixture of fixtures) {
      const fixturePath = path.join(fixturesDir, fixture)
      const expectedPath = path.join(expectedDir, fixture.replace('.3mf', '.gcode'))
      
      if (!fs.existsSync(expectedPath)) {
        console.warn(`Arquivo de referência não encontrado: ${expectedPath}`)
        continue
      }

      const slicer = new SlicerCoreFacade()
      const builder = new CoreInputBuilder(app)
      
      const fileBuffer = fs.readFileSync(fixturePath)
      const coreInput = await builder.fromUploadedFile({
        buffer: fileBuffer,
        originalFilename: fixture
      })
      
      const actualGcode = await slicer.sliceToGcode(coreInput)
      const expectedGcode = fs.readFileSync(expectedPath, 'utf8')
      
      const normalizedActual = normalizeGcode(actualGcode)
      const normalizedExpected = normalizeGcode(expectedGcode)
      
      assert.strictEqual(normalizedActual, normalizedExpected, 
        `G-code mismatch for fixture ${fixture}`)
    }
  })
})
