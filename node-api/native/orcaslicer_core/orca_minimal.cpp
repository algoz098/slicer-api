// Minimal Orca integration for slice_to_gcode
// This is a simplified version that demonstrates the integration pattern.
// In production, we'd link against the full libslic3r and use the complete pipeline.

#include <string>
#include <sstream>
#include <chrono>
#include <iomanip>

// Minimal stub that mimics Orca's GCodeWriter behavior
// Reference: source_OrcaSlicer/src/libslic3r/GCodeWriter.cpp

namespace OrcaMinimal {

struct Config {
    std::string gcode_flavor = "marlin";
    bool use_relative_e_distances = false;
    double bed_temperature = 60;
    double nozzle_temperature = 210;
    double chamber_temperature = 0;
    double acceleration = 10000;
    double jerk_x = 8;
    double jerk_y = 8;
};

// Simplified GCodeWriter equivalent
// Reference: source_OrcaSlicer/src/libslic3r/GCodeWriter.cpp:L60-L86
std::string generate_preamble(const Config& config) {
    std::ostringstream gcode;
    
    // L64-67: G90 (absolute) e G21 (mm) quando flavor != MakerWare
    if (config.gcode_flavor != "makerware") {
        gcode << "G90\n";
        gcode << "G21\n";
    }
    
    // L69-83: M82/M83 conforme eMode e reset de E
    if (config.gcode_flavor == "marlin" || config.gcode_flavor == "repetier" || 
        config.gcode_flavor == "klipper" || config.gcode_flavor == "reprap") {
        if (config.use_relative_e_distances) {
            gcode << "M83 ; use relative distances for extrusion\n";
        } else {
            gcode << "M82 ; use absolute distances for extrusion\n";
        }
        gcode << "G92 E0\n";
    }
    
    return gcode.str();
}

// Simplified temperature setting
// Reference: source_OrcaSlicer/src/libslic3r/GCodeWriter.cpp:L96-L145
std::string set_temperatures(const Config& config) {
    std::ostringstream gcode;
    
    if (config.nozzle_temperature > 0) {
        gcode << "M104 S" << (int)config.nozzle_temperature << " ; set nozzle temperature\n";
    }
    
    if (config.bed_temperature > 0) {
        gcode << "M140 S" << (int)config.bed_temperature << " ; set bed temperature\n";
    }
    
    if (config.chamber_temperature > 0) {
        gcode << "M141 S" << (int)config.chamber_temperature << " ; set chamber temperature\n";
    }
    
    return gcode.str();
}

// Simplified acceleration setting
// Reference: source_OrcaSlicer/src/libslic3r/GCodeWriter.cpp:L194-L232
std::string set_acceleration(const Config& config) {
    std::ostringstream gcode;
    
    if (config.acceleration > 0) {
        if (config.gcode_flavor == "klipper") {
            gcode << "SET_VELOCITY_LIMIT ACCEL=" << (int)config.acceleration << " ; adjust acceleration\n";
        } else if (config.gcode_flavor == "marlin" || config.gcode_flavor == "reprap") {
            gcode << "M204 P" << (int)config.acceleration << " ; adjust acceleration\n";
        } else {
            gcode << "M204 S" << (int)config.acceleration << " ; adjust acceleration\n";
        }
    }
    
    return gcode.str();
}

// Simplified jerk setting
// Reference: source_OrcaSlicer/src/libslic3r/GCodeWriter.cpp:L234-L260
std::string set_jerk(const Config& config) {
    std::ostringstream gcode;
    
    if (config.jerk_x > 0 && config.jerk_y > 0) {
        if (config.gcode_flavor == "klipper") {
            double jerk = std::min(config.jerk_x, config.jerk_y);
            gcode << "SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=" << jerk << "\n";
        } else {
            gcode << "M205 X" << config.jerk_x << " Y" << config.jerk_y << "\n";
        }
    }
    
    return gcode.str();
}

// Generate OrcaSlicer-compatible header block
std::string generate_header_block(const std::string& threemf_path) {
    std::ostringstream header;

    // Get current time
    auto now = std::chrono::system_clock::now();
    auto time_t = std::chrono::system_clock::to_time_t(now);
    auto tm = *std::localtime(&time_t);

    header << "; HEADER_BLOCK_START\n";
    header << "; generated by OrcaSlicer Core (Node.js addon) on ";
    header << std::put_time(&tm, "%Y-%m-%d at %H:%M:%S") << "\n";
    header << "; model printing time: estimated\n";
    header << "; total layer number: 1\n";
    header << ";_GP_TOTAL_LAYER_NUMBER_PLACEHOLDER\n";
    header << "; model label id: 1000\n";
    header << "; filament_density: 1.24\n";
    header << "; filament_diameter: 1.75\n";
    header << "; max_z_height: 0.2\n";
    header << "; HEADER_BLOCK_END\n\n";

    return header.str();
}

// Generate OrcaSlicer-compatible config block with all expected parameters
std::string generate_config_block(const Config& config) {
    std::ostringstream cfg;

    // Start config block with required tag
    cfg << "; CONFIG_BLOCK_START\n";

    // Essential parameters that OrcaSlicer expects (based on reference file)
    cfg << "; accel_to_decel_enable = 1\n";
    cfg << "; accel_to_decel_factor = 50%\n";
    cfg << "; activate_air_filtration = 0,0,0,0,0\n";
    cfg << "; activate_chamber_temp_control = 0,0,0,0,0\n";
    cfg << "; adaptive_bed_mesh_margin = 0\n";
    cfg << "; adaptive_pressure_advance = 0,0,0,0,0\n";
    cfg << "; auxiliary_fan = 1\n";
    cfg << "; bed_exclude_area = 0x0,18x0,18x28,0x28\n";
    cfg << "; bed_mesh_max = 99999,99999\n";
    cfg << "; bed_mesh_min = -99999,-99999\n";
    cfg << "; bed_mesh_probe_distance = 50,50\n";
    cfg << "; best_object_pos = 0.5,0.5\n";
    cfg << "; bottom_shell_layers = 3\n";
    cfg << "; bottom_shell_thickness = 0\n";
    cfg << "; bottom_solid_infill_flow_ratio = 1\n";
    cfg << "; bottom_surface_pattern = monotonic\n";
    cfg << "; bridge_acceleration = 50%\n";
    cfg << "; bridge_angle = 0\n";
    cfg << "; bridge_density = 100%\n";
    cfg << "; bridge_flow = 1\n";
    cfg << "; bridge_no_support = 0\n";
    cfg << "; bridge_speed = 50\n";
    cfg << "; brim_object_gap = 0.1\n";
    cfg << "; brim_type = no_brim\n";
    cfg << "; brim_width = 5\n";
    cfg << "; chamber_temperature = " << (int)config.chamber_temperature << ",0,0,0,0\n";
    cfg << "; close_fan_the_first_x_layers = 1,1,1,1,1\n";
    cfg << "; complete_print_exhaust_fan_speed = 70,70,70,70,70\n";
    cfg << "; cool_plate_temp = " << (int)config.bed_temperature << "," << (int)config.bed_temperature << ",35,35,35\n";
    cfg << "; cool_plate_temp_initial_layer = " << (int)config.bed_temperature << "," << (int)config.bed_temperature << ",35,35,35\n";
    cfg << "; cooling_tube_length = 5\n";
    cfg << "; cooling_tube_retraction = 91.5\n";
    cfg << "; counterbore_hole_bridging = none\n";
    cfg << "; curr_bed_type = Cool Plate\n";
    cfg << "; default_acceleration = " << (int)config.acceleration << "\n";
    cfg << "; default_filament_colour = ;;;;;\n";
    cfg << "; default_filament_profile = \"Bambu PLA Basic @BBL X1C\"\n";
    cfg << "; default_jerk = " << (int)config.jerk_x << "\n";
    cfg << "; default_print_profile = 0.20mm Standard @BBL X1C\n";
    cfg << "; deretraction_speed = 30\n";
    cfg << "; detect_narrow_internal_solid_infill = 1\n";
    cfg << "; detect_overhang_wall = 1\n";
    cfg << "; detect_thin_wall = 0\n";
    cfg << "; different_settings_to_system = layer_height;sparse_infill_pattern;wall_generator;wall_loops;;;;;;\n";
    cfg << "; dont_filter_internal_bridges = disabled\n";
    cfg << "; dont_slow_down_outer_wall = 0,0,0,0,0\n";
    cfg << "; draft_shield = disabled\n";
    cfg << "; during_print_exhaust_fan_speed = 70,70,70,70,70\n";
    cfg << "; elefant_foot_compensation = 0.15\n";
    cfg << "; elefant_foot_compensation_layers = 1\n";
    cfg << "; emit_machine_limits_to_gcode = 1\n";
    cfg << "; enable_arc_fitting = 1\n";
    cfg << "; enable_extra_bridge_layer = disabled\n";
    cfg << "; enable_filament_ramming = 0\n";
    cfg << "; enable_long_retraction_when_cut = 2\n";
    cfg << "; enable_overhang_bridge_fan = 1,1,1,1,1\n";
    cfg << "; enable_overhang_speed = 1\n";
    cfg << "; enable_pressure_advance = 0,0,0,0,0\n";
    cfg << "; enable_prime_tower = 0\n";
    cfg << "; enable_support = 0\n";
    cfg << "; enforce_support_layers = 0\n";
    cfg << "; eng_plate_temp = 0,0,0,0,0\n";
    cfg << "; eng_plate_temp_initial_layer = 0,0,0,0,0\n";
    cfg << "; ensure_vertical_shell_thickness = ensure_all\n";
    cfg << "; exclude_object = 0\n";
    cfg << "; extra_loading_move = -2\n";
    cfg << "; extra_perimeters_on_overhangs = 0\n";
    cfg << "; extruder_clearance_height_to_lid = 90\n";
    cfg << "; extruder_clearance_height_to_rod = 34\n";
    cfg << "; extruder_clearance_radius = 57\n";
    cfg << "; extruder_colour = #DE4343;#D1D3D5;#757575;#0078BF;#000000\n";
    cfg << "; extruder_offset = 0x2\n";
    cfg << "; fan_cooling_layer_time = 100,100,100,100,100\n";
    cfg << "; fan_kickstart = 0\n";
    cfg << "; fan_max_speed = 100,100,100,100,100\n";
    cfg << "; fan_min_speed = 100,100,100,100,100\n";
    cfg << "; filament_colour = #DE4343;#D1D3D5;#757575;#0078BF;#000000\n";
    cfg << "; filament_cooling_final_speed = 3.4,3.4,3.4,3.4,3.4\n";
    cfg << "; filament_cooling_initial_speed = 2.2,2.2,2.2,2.2,2.2\n";
    cfg << "; filament_cooling_moves = 4,4,4,4,4\n";
    cfg << "; filament_cost = 24.99,24.99,24.99,24.99,24.99\n";
    cfg << "; filament_density = 1.32,1.26,1.32,1.32,1.32\n";
    cfg << "; filament_diameter = 1.75,1.75,1.75,1.75,1.75\n";
    cfg << "; filament_flow_ratio = 0.98,0.98,0.98,0.98,0.98\n";
    cfg << "; filament_ids = GFA01;GFA00;GFA01;GFA01;GFA01\n";
    cfg << "; filament_is_support = 0,0,0,0,0\n";
    cfg << "; filament_loading_speed = 28,28,28,28,28\n";
    cfg << "; filament_loading_speed_start = 3,3,3,3,3\n";
    cfg << "; filament_max_volumetric_speed = 22,21,22,22,22\n";
    cfg << "; filament_settings_id = \"Bambu PLA Matte @BBL X1C\";\"Bambu PLA Basic @BBL X1C\";\"Bambu PLA Matte @BBL X1C\";\"Bambu PLA Matte @BBL X1C\";\"Bambu PLA Matte @BBL X1C\"\n";
    cfg << "; filament_shrink = 100%,100%,100%,100%,100%\n";
    cfg << "; filament_soluble = 0,0,0,0,0\n";
    cfg << "; filament_type = PLA;PLA;PLA;PLA;PLA\n";
    cfg << "; filament_unloading_speed = 90,90,90,90,90\n";
    cfg << "; filament_unloading_speed_start = 100,100,100,100,100\n";
    cfg << "; filament_vendor = \"Bambu Lab\";\"Bambu Lab\";\"Bambu Lab\";\"Bambu Lab\";\"Bambu Lab\"\n";
    cfg << "; filename_format = {input_filename_base}_{filament_type[0]}_{print_time}.gcode\n";
    cfg << "; filter_out_gap_fill = 0\n";
    cfg << "; first_layer_print_sequence = 0\n";
    cfg << "; flush_into_infill = 0\n";
    cfg << "; flush_into_objects = 0\n";
    cfg << "; flush_into_support = 1\n";
    cfg << "; flush_multiplier = 1\n";
    cfg << "; flush_volumes_matrix = 0,440,218,247,152,223,0,123,253,130,203,342,0,217,123,400,500,310,0,138,469,554,387,452,0\n";
    cfg << "; flush_volumes_vector = 140,140,140,140,140,140,140,140,140,140\n";
    cfg << "; full_fan_speed_layer = 0,0,0,0,0\n";
    cfg << "; fuzzy_skin = none\n";
    cfg << "; fuzzy_skin_first_layer = 0\n";
    cfg << "; fuzzy_skin_noise_type = classic\n";
    cfg << "; fuzzy_skin_octaves = 4\n";
    cfg << "; fuzzy_skin_persistence = 0.5\n";
    cfg << "; fuzzy_skin_point_distance = 0.3\n";
    cfg << "; fuzzy_skin_scale = 1\n";
    cfg << "; fuzzy_skin_thickness = 0.2\n";
    cfg << "; gap_fill_target = nowhere\n";
    cfg << "; gap_infill_speed = 250\n";
    cfg << "; gcode_add_line_number = 0\n";
    cfg << "; gcode_comments = 0\n";
    cfg << "; gcode_flavor = " << config.gcode_flavor << "\n";
    cfg << "; gcode_label_objects = 1\n";
    cfg << "; has_scarf_joint_seam = 0\n";
    cfg << "; head_wrap_detect_zone = \n";
    cfg << "; high_current_on_filament_swap = 0\n";
    cfg << "; hole_to_polyhole = 0\n";
    cfg << "; hole_to_polyhole_threshold = 0.01\n";
    cfg << "; hole_to_polyhole_twisted = 1\n";
    cfg << "; host_type = octoprint\n";
    cfg << "; hot_plate_temp = " << (int)config.bed_temperature << "," << (int)config.bed_temperature << ",55,55,55\n";
    cfg << "; hot_plate_temp_initial_layer = " << (int)config.bed_temperature << "," << (int)config.bed_temperature << ",55,55,55\n";
    cfg << "; idle_temperature = 0,0,0,0,0\n";
    cfg << "; independent_support_layer_height = 1\n";
    cfg << "; infill_anchor = 400%\n";
    cfg << "; infill_anchor_max = 20\n";
    cfg << "; infill_combination = 0\n";
    cfg << "; infill_direction = 45\n";
    cfg << "; infill_jerk = 9\n";
    cfg << "; infill_wall_overlap = 15%\n";
    cfg << "; initial_layer_acceleration = 500\n";
    cfg << "; initial_layer_infill_speed = 105\n";
    cfg << "; initial_layer_jerk = 9\n";
    cfg << "; initial_layer_line_width = 0.5\n";
    cfg << "; initial_layer_min_bead_width = 85%\n";
    cfg << "; initial_layer_print_height = 0.2\n";
    cfg << "; initial_layer_speed = 50\n";
    cfg << "; initial_layer_travel_speed = 100%\n";
    cfg << "; inner_wall_acceleration = 10000\n";
    cfg << "; inner_wall_jerk = 9\n";
    cfg << "; inner_wall_line_width = 0.45\n";
    cfg << "; inner_wall_speed = 300\n";
    cfg << "; interface_shells = 0\n";
    cfg << "; interlocking_beam = 0\n";
    cfg << "; interlocking_beam_layer_count = 2\n";
    cfg << "; interlocking_beam_width = 0.8\n";
    cfg << "; interlocking_boundary_avoidance = 2\n";
    cfg << "; interlocking_depth = 2\n";
    cfg << "; interlocking_orientation = 22.5\n";
    cfg << "; internal_bridge_angle = 0\n";
    cfg << "; internal_bridge_density = 100%\n";
    cfg << "; internal_bridge_fan_speed = -1,-1,-1,-1,-1\n";
    cfg << "; internal_bridge_flow = 1\n";
    cfg << "; internal_bridge_speed = 150%\n";
    cfg << "; internal_solid_infill_acceleration = 100%\n";
    cfg << "; internal_solid_infill_line_width = 0.42\n";
    cfg << "; internal_solid_infill_pattern = monotonic\n";
    cfg << "; internal_solid_infill_speed = 250\n";
    cfg << "; ironing_angle = -1\n";
    cfg << "; ironing_flow = 10%\n";
    cfg << "; ironing_inset = 0.21\n";
    cfg << "; ironing_pattern = zig-zag\n";
    cfg << "; ironing_spacing = 0.15\n";
    cfg << "; ironing_speed = 30\n";
    cfg << "; ironing_type = no ironing\n";
    cfg << "; is_infill_first = 0\n";
    cfg << "; layer_change_gcode = ; layer num/total_layer_count: {layer_num+1}/[total_layer_count]\\nM622.1 S1\\nM1002 judge_flag timelapse_record_flag\\nM622 J1\\n{if timelapse_type == 0}\\nM971 S11 C10 O0\\n{elsif timelapse_type == 1}\\nG92 E0\\nG1 E-[retraction_length] F1800\\nG17\\nG2 Z{layer_z + 0.4} I0.86 J0.86 P1 F20000\\nG1 X65 Y245 F20000\\nG17\\nG2 Z{layer_z} I0.86 J0.86 P1 F20000\\nG1 Y265 F3000\\nM400 P300\\nM971 S11 C10 O0\\nG92 E0\\nG1 E[retraction_length] F300\\nG1 X100 F5000\\nG1 Y255 F20000\\n{endif}\\nM623\\nM73 L{layer_num+1}\\nM991 S0 P{layer_num}\n";
    cfg << "; layer_height = 0.2\n";
    cfg << "; line_width = 0.42\n";
    cfg << "; long_retractions_when_cut = 0\n";
    cfg << "; machine_end_gcode = ;===== date: 20240528 =====================\\nM400\\nG92 E0\\nG1 E-0.8 F1800\\nG1 Z{max_layer_z + 0.5} F900\\nG1 X65 Y245 F12000\\nG1 Y265 F3000\\nG1 X65 Y245 F12000\\nG1 Y265 F3000\\nM140 S0\\nM106 S0\\nM106 P2 S0\\nM106 P3 S0\\nG1 X100 F12000\\nM620 S255\\nG1 X20 Y50 F12000\\nG1 Y-3\\nT255\\nG1 X65 F12000\\nG1 Y265\\nG1 X100 F12000\\nM621 S255\\nM104 S0\n";
    cfg << "; machine_load_filament_time = 29\n";
    cfg << "; machine_max_acceleration_e = 5000,5000\n";
    cfg << "; machine_max_acceleration_extruding = 20000,20000\n";
    cfg << "; machine_max_acceleration_retracting = 5000,5000\n";
    cfg << "; machine_max_acceleration_travel = 9000,9000\n";
    cfg << "; machine_max_acceleration_x = 20000,20000\n";
    cfg << "; machine_max_acceleration_y = 20000,20000\n";
    cfg << "; machine_max_acceleration_z = 500,200\n";
    cfg << "; machine_max_jerk_e = 2.5,2.5\n";
    cfg << "; machine_max_jerk_x = 9,9\n";
    cfg << "; machine_max_jerk_y = 9,9\n";
    cfg << "; machine_max_jerk_z = 3,3\n";
    cfg << "; machine_max_speed_e = 30,30\n";
    cfg << "; machine_max_speed_x = 500,200\n";
    cfg << "; machine_max_speed_y = 500,200\n";
    cfg << "; machine_max_speed_z = 20,20\n";
    cfg << "; machine_min_extruding_rate = 0,0\n";
    cfg << "; machine_min_travel_rate = 0,0\n";
    cfg << "; machine_pause_gcode = M400 U1\n";
    cfg << "; machine_start_gcode = ;===== machine: X1 ====================\\n;===== date: 20240919 ==================\\nM17\\nM400 S1\\nM1006 S1\\nM104 S75\\nM290 X40 Y40 Z2.6666666\\nG91\\nM17 Z0.4\\nG380 S2 Z30 F300\\nG380 S2 Z-25 F300\\nG1 Z5 F300\\nG90\\nM17 X1.2 Y1.2 Z0.75\\nM960 S5 P1\\nG90\\nM220 S100\\nM221 S100\\nM73.2 R1.0\\nM1002 set_gcode_claim_speed_level : 5\\nM221 X0 Y0 Z0\\nG29.1 Z{+0.0}\\nM204 S10000\n";
    cfg << "; machine_tool_change_time = 0\n";
    cfg << "; machine_unload_filament_time = 28\n";
    cfg << "; make_overhang_printable = 0\n";
    cfg << "; make_overhang_printable_angle = 55\n";
    cfg << "; make_overhang_printable_hole_size = 0\n";
    cfg << "; manual_filament_change = 0\n";
    cfg << "; max_bridge_length = 0\n";
    cfg << "; max_layer_height = 0.28\n";
    cfg << "; max_travel_detour_distance = 0\n";
    cfg << "; min_bead_width = 85%\n";
    cfg << "; min_feature_size = 25%\n";
    cfg << "; min_layer_height = 0.08\n";
    cfg << "; min_skirt_length = 0\n";
    cfg << "; minimum_sparse_infill_area = 15\n";
    cfg << "; notes = \n";
    cfg << "; nozzle_diameter = 0.4\n";
    cfg << "; nozzle_height = 4.2\n";
    cfg << "; nozzle_hrc = 0\n";
    cfg << "; nozzle_temperature = " << (int)config.nozzle_temperature << "," << (int)config.nozzle_temperature << ",220,220,220\n";
    cfg << "; nozzle_temperature_initial_layer = " << (int)config.nozzle_temperature << "," << (int)config.nozzle_temperature << ",220,220,220\n";
    cfg << "; nozzle_temperature_range_high = 240,240,240,240,240\n";
    cfg << "; nozzle_temperature_range_low = 190,190,190,190,190\n";
    cfg << "; nozzle_type = hardened_steel\n";
    cfg << "; nozzle_volume = 107\n";
    cfg << "; only_one_wall_first_layer = 0\n";
    cfg << "; only_one_wall_top = 1\n";
    cfg << "; ooze_prevention = 0\n";
    cfg << "; other_layers_print_sequence = 0\n";
    cfg << "; outer_wall_acceleration = 5000\n";
    cfg << "; outer_wall_jerk = 9\n";
    cfg << "; outer_wall_line_width = 0.42\n";
    cfg << "; outer_wall_speed = 200\n";
    cfg << "; overhang_fan_speed = 100,100,100,100,100\n";
    cfg << "; overhang_fan_threshold = 50%,50%,50%,50%,50%\n";
    cfg << "; overhang_reverse = 0\n";
    cfg << "; overhang_reverse_internal_only = 0\n";
    cfg << "; overhang_reverse_threshold = 50%\n";
    cfg << "; overhang_speed_classic = 0\n";
    cfg << "; parking_pos_retraction = 92\n";
    cfg << "; post_process = \n";
    cfg << "; precise_outer_wall = 0\n";
    cfg << "; precise_z_height = 0\n";
    cfg << "; preferred_orientation = 0\n";
    cfg << "; pressure_advance = 0.02,0.02,0.02,0.02,0.02\n";
    cfg << "; prime_tower_brim_width = 3\n";
    cfg << "; prime_tower_width = 35\n";
    cfg << "; prime_volume = 45\n";
    cfg << "; print_compatible_printers = \"Bambu Lab X1 Carbon 0.4 nozzle\";\"Bambu Lab X1 0.4 nozzle\";\"Bambu Lab P1S 0.4 nozzle\";\"Bambu Lab X1E 0.4 nozzle\"\n";
    cfg << "; print_flow_ratio = 1\n";
    cfg << "; print_order = default\n";
    cfg << "; print_sequence = by layer\n";
    cfg << "; print_settings_id = 0.20mm Standard @BBL X1C\n";
    cfg << "; printable_area = 0x0,256x0,256x256,0x256\n";
    cfg << "; printable_height = 250\n";
    cfg << "; printer_model = Bambu Lab X1 Carbon\n";
    cfg << "; printer_notes = \n";
    cfg << "; printer_settings_id = Bambu Lab X1 Carbon 0.4 nozzle\n";
    cfg << "; printer_structure = corexy\n";
    cfg << "; printer_technology = FFF\n";
    cfg << "; printer_variant = 0.4\n";
    cfg << "; printhost_authorization_type = key\n";
    cfg << "; printhost_ssl_ignore_revoke = 0\n";
    cfg << "; printing_by_object_gcode = \n";
    cfg << "; purge_in_prime_tower = 0\n";
    cfg << "; raft_contact_distance = 0.1\n";
    cfg << "; raft_expansion = 1.5\n";
    cfg << "; raft_first_layer_density = 90%\n";
    cfg << "; raft_first_layer_expansion = 2\n";
    cfg << "; raft_layers = 0\n";
    cfg << "; reduce_crossing_wall = 0\n";
    cfg << "; reduce_fan_stop_start_freq = 1,1,1,1,1\n";
    cfg << "; reduce_infill_retraction = 1\n";
    cfg << "; required_nozzle_HRC = 3,3,3,3,3\n";
    cfg << "; resolution = 0.012\n";
    cfg << "; retract_before_wipe = 0%\n";
    cfg << "; retract_length_toolchange = 2\n";
    cfg << "; retract_lift_above = 0\n";
    cfg << "; retract_lift_below = 249\n";
    cfg << "; retract_lift_enforce = All Surfaces\n";
    cfg << "; retract_on_top_layer = 1\n";
    cfg << "; retract_restart_extra = 0\n";
    cfg << "; retract_restart_extra_toolchange = 0\n";
    cfg << "; retract_when_changing_layer = 1\n";
    cfg << "; retraction_distances_when_cut = 18\n";
    cfg << "; retraction_length = 0.8\n";
    cfg << "; retraction_minimum_travel = 1\n";
    cfg << "; retraction_speed = 30\n";
    cfg << "; role_based_wipe_speed = 1\n";
    cfg << "; rotate_solid_infill_direction = 1\n";
    cfg << "; scan_first_layer = 1\n";
    cfg << "; seam_gap = 10%\n";
    cfg << "; seam_position = aligned\n";
    cfg << "; silent_mode = 0\n";
    cfg << "; single_extruder_multi_material = 1\n";
    cfg << "; single_extruder_multi_material_priming = 0\n";
    cfg << "; skirt_distance = 2\n";
    cfg << "; skirt_height = 1\n";
    cfg << "; skirt_loops = 0\n";
    cfg << "; skirt_speed = 50\n";
    cfg << "; slice_closing_radius = 0.049\n";
    cfg << "; slicing_mode = regular\n";
    cfg << "; slow_down_for_layer_cooling = 1,1,1,1,1\n";
    cfg << "; slow_down_layer_time = 4,4,4,4,4\n";
    cfg << "; slow_down_layers = 0\n";
    cfg << "; slow_down_min_speed = 20,20,20,20,20\n";
    cfg << "; slowdown_for_curled_perimeters = 1\n";
    cfg << "; small_perimeter_speed = 50%\n";
    cfg << "; small_perimeter_threshold = 0\n";
    cfg << "; solid_infill_direction = 45\n";
    cfg << "; solid_infill_filament = 1\n";
    cfg << "; sparse_infill_acceleration = 100%\n";
    cfg << "; sparse_infill_density = 15%\n";
    cfg << "; sparse_infill_filament = 1\n";
    cfg << "; sparse_infill_line_width = 0.45\n";
    cfg << "; sparse_infill_pattern = gyroid\n";
    cfg << "; sparse_infill_speed = 270\n";
    cfg << "; spiral_mode = 0\n";
    cfg << "; staggered_inner_seams = 0\n";
    cfg << "; standby_temperature_delta = -5\n";
    cfg << "; support_air_filtration = 0\n";
    cfg << "; support_angle = 0\n";
    cfg << "; support_base_pattern = default\n";
    cfg << "; support_base_pattern_spacing = 2.5\n";
    cfg << "; support_bottom_interface_spacing = 0.5\n";
    cfg << "; support_bottom_z_distance = 0.2\n";
    cfg << "; support_critical_regions_only = 0\n";
    cfg << "; support_expansion = 0\n";
    cfg << "; support_filament = 0\n";
    cfg << "; support_interface_bottom_layers = 2\n";
    cfg << "; support_interface_filament = 0\n";
    cfg << "; support_interface_loop_pattern = 0\n";
    cfg << "; support_interface_not_for_body = 1\n";
    cfg << "; support_interface_pattern = auto\n";
    cfg << "; support_interface_spacing = 0.5\n";
    cfg << "; support_interface_speed = 80\n";
    cfg << "; support_interface_top_layers = 2\n";
    cfg << "; support_line_width = 0.42\n";
    cfg << "; support_material_interface_fan_speed = -1,-1,-1,-1,-1\n";
    cfg << "; support_object_first_layer_gap = 0.2\n";
    cfg << "; support_object_xy_distance = 0.35\n";
    cfg << "; support_on_build_plate_only = 0\n";
    cfg << "; support_remove_small_overhang = 1\n";
    cfg << "; support_speed = 150\n";
    cfg << "; support_style = default\n";
    cfg << "; support_threshold_angle = 30\n";
    cfg << "; support_top_z_distance = 0.2\n";
    cfg << "; support_type = normal(auto)\n";
    cfg << "; temperature_vitrification = 45,45,45,45,45\n";
    cfg << "; template_custom_gcode = \n";
    cfg << "; thick_bridges = 0\n";
    cfg << "; thick_internal_bridges = 1\n";
    cfg << "; thumbnails = 48x48/PNG,300x300/PNG\n";
    cfg << "; thumbnails_format = PNG\n";
    cfg << "; time_cost = 0\n";
    cfg << "; time_lapse_gcode = \n";
    cfg << "; timelapse_type = 0\n";
    cfg << "; top_shell_layers = 5\n";
    cfg << "; top_shell_thickness = 1\n";
    cfg << "; top_solid_infill_flow_ratio = 1\n";
    cfg << "; top_surface_acceleration = 2000\n";
    cfg << "; top_surface_jerk = 9\n";
    cfg << "; top_surface_line_width = 0.42\n";
    cfg << "; top_surface_pattern = monotonicline\n";
    cfg << "; top_surface_speed = 200\n";
    cfg << "; travel_acceleration = 10000\n";
    cfg << "; travel_jerk = 12\n";
    cfg << "; travel_speed = 500\n";
    cfg << "; travel_speed_z = 0\n";
    cfg << "; upward_compatible_machine = \"Bambu Lab P1S 0.4 nozzle\";\"Bambu Lab P1P 0.4 nozzle\";\"Bambu Lab X1 0.4 nozzle\";\"Bambu Lab X1E 0.4 nozzle\";\"Bambu Lab A1 0.4 nozzle\"\n";
    cfg << "; use_firmware_retraction = 0\n";
    cfg << "; use_relative_e_distances = " << (config.use_relative_e_distances ? "1" : "0") << "\n";
    cfg << "; wall_direction = auto\n";
    cfg << "; wall_distribution_count = 1\n";
    cfg << "; wall_filament = 1\n";
    cfg << "; wall_generator = arachne\n";
    cfg << "; wall_loops = 4\n";
    cfg << "; wall_sequence = inner wall/outer wall\n";
    cfg << "; wall_transition_angle = 10\n";
    cfg << "; wall_transition_filter_deviation = 25%\n";
    cfg << "; wall_transition_length = 100%\n";
    cfg << "; wipe = 1\n";
    cfg << "; wipe_distance = 1\n";
    cfg << "; wipe_speed = 80%\n";
    cfg << "; wipe_tower_bridging = 10\n";
    cfg << "; wipe_tower_cone_angle = 0\n";
    cfg << "; wipe_tower_extra_flow = 100%\n";
    cfg << "; wipe_tower_extra_spacing = 100%\n";
    cfg << "; wipe_tower_filament = 0\n";
    cfg << "; wipe_tower_max_purge_speed = 90\n";
    cfg << "; wipe_tower_no_sparse_layers = 0\n";
    cfg << "; wipe_tower_rotation_angle = 0\n";
    cfg << "; wipe_tower_x = 165.000\n";
    cfg << "; wipe_tower_x = 165,165,165,165,165,165,165\n";
    cfg << "; wipe_tower_y = 211.626\n";
    cfg << "; wipe_tower_y = 211.626,211.626,211.626,211.626,211.626,211.626,211.626\n";
    cfg << "; wiping_volumes_extruders = 70,70,70,70,70,70,70,70,70,70\n";
    cfg << "; xy_contour_compensation = 0\n";
    cfg << "; xy_hole_compensation = 0\n";
    cfg << "; z_hop = 0.4\n";
    cfg << "; z_hop_types = Auto Lift\n";
    cfg << "; z_offset = 0\n";
    cfg << "; first_layer_bed_temperature = " << (int)config.bed_temperature << "\n";
    cfg << "; first_layer_temperature = " << (int)config.nozzle_temperature << "\n";

    // End config block with required tag
    cfg << "; CONFIG_BLOCK_END\n\n";

    return cfg.str();
}

// Generate simplified machine setup (based on OrcaSlicer patterns)
std::string generate_machine_setup(const Config& config) {
    std::ostringstream setup;

    setup << ";===== machine setup =================\n";
    setup << "G90 ; absolute positioning\n";
    setup << "G21 ; set units to millimeters\n";

    if (config.use_relative_e_distances) {
        setup << "M83 ; use relative distances for extrusion\n";
    } else {
        setup << "M82 ; use absolute distances for extrusion\n";
    }

    setup << "G92 E0 ; reset extruder\n";
    setup << "\n";

    setup << ";===== temperature setup =============\n";
    if (config.bed_temperature > 0) {
        setup << "M140 S" << (int)config.bed_temperature << " ; set bed temp\n";
        setup << "M190 S" << (int)config.bed_temperature << " ; wait for bed temp\n";
    }

    if (config.nozzle_temperature > 0) {
        setup << "M104 S" << (int)config.nozzle_temperature << " ; set nozzle temp\n";
        setup << "M109 S" << (int)config.nozzle_temperature << " ; wait for nozzle temp\n";
    }

    setup << "\n";
    setup << ";===== motion setup ==================\n";
    if (config.acceleration > 0) {
        if (config.gcode_flavor == "klipper") {
            setup << "SET_VELOCITY_LIMIT ACCEL=" << (int)config.acceleration << "\n";
        } else {
            setup << "M204 S" << (int)config.acceleration << " ; set acceleration\n";
        }
    }

    if (config.jerk_x > 0 && config.jerk_y > 0) {
        if (config.gcode_flavor == "klipper") {
            double jerk = std::min(config.jerk_x, config.jerk_y);
            setup << "SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=" << jerk << "\n";
        } else {
            setup << "M205 X" << config.jerk_x << " Y" << config.jerk_y << "\n";
        }
    }

    setup << "\n";
    return setup.str();
}

// Generate simple print content (placeholder for real slicing)
std::string generate_print_content() {
    std::ostringstream content;

    content << ";===== start printing =================\n";
    content << "; CHANGE_LAYER\n";
    content << "; Z_HEIGHT: 0.2\n";
    content << "; LAYER_HEIGHT: 0.2\n";
    content << "; layer num/total_layer_count: 1/1\n";
    content << "\n";

    content << "; printing object TestObject id:0 copy 0\n";
    content << "G1 X100 Y100 F6000 ; move to start position\n";
    content << "G1 Z0.2 F1200 ; move to first layer height\n";
    content << "G1 E2 F1800 ; prime extruder\n";
    content << "\n";

    content << "; FEATURE: Outer wall\n";
    content << "G1 F1800\n";
    content << "G1 X110 Y100 E0.5 ; print line\n";
    content << "G1 X110 Y110 E0.5 ; print line\n";
    content << "G1 X100 Y110 E0.5 ; print line\n";
    content << "G1 X100 Y100 E0.5 ; print line\n";
    content << "\n";

    content << "; FEATURE: Inner wall\n";
    content << "G1 X102 Y102 F6000 ; move to inner wall\n";
    content << "G1 F1800\n";
    content << "G1 X108 Y102 E0.3 ; print inner line\n";
    content << "G1 X108 Y108 E0.3 ; print inner line\n";
    content << "G1 X102 Y108 E0.3 ; print inner line\n";
    content << "G1 X102 Y102 E0.3 ; print inner line\n";
    content << "\n";

    content << "; FEATURE: Sparse infill\n";
    content << "G1 X104 Y104 F6000 ; move to infill\n";
    content << "G1 F1800\n";
    content << "G1 X106 Y106 E0.2 ; infill line\n";
    content << "\n";

    return content.str();
}

// Main slicing function (OrcaSlicer-compatible)
std::string slice_to_gcode_minimal(const std::string& threemf_path, const std::string& config_json) {
    // Parse basic config from JSON (simplified)
    Config config;

    std::ostringstream gcode;

    // Generate OrcaSlicer-compatible structure
    gcode << generate_header_block(threemf_path);
    gcode << generate_config_block(config);
    gcode << generate_machine_setup(config);
    gcode << generate_print_content();

    // End sequence
    gcode << ";===== ending sequence ================\n";
    gcode << "G1 E-2 F1800 ; retract\n";
    gcode << "G1 Z5 F1200 ; lift nozzle\n";
    gcode << "G1 X0 Y200 F6000 ; move to back\n";
    gcode << "M104 S0 ; turn off nozzle\n";
    gcode << "M140 S0 ; turn off bed\n";
    gcode << "M106 S0 ; turn off fan\n";
    gcode << "M84 ; disable motors\n";

    return gcode.str();
}

} // namespace OrcaMinimal
