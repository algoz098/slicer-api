name: Build and Push orcaslicer-build-deps (GHCR, linux/amd64)

on:
  workflow_dispatch:
    inputs:
      ci_max_jobs:
        description: 'CI_MAX_JOBS passed to the build'
        required: false
        default: '2'

permissions:
  contents: read
  packages: write


env:
  # Sufixo fixo da versão (ex.: 'a' para gerar 3.0.1a). Deixe vazio para não usar sufixo.
  ORCASLICER_SUFFIX: "a"

concurrency:
  group: ghcr-orcaslicer-build-deps-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-push:
    runs-on: ubuntu-latest  # native amd64 runner, no emulation
    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Derive tag components (version, arch)
        id: meta
        shell: bash
        run: |
          BASE_VERSION=$(sed -nE 's/.*set\(SoftFever_VERSION "([0-9]+\.[0-9]+\.[0-9]+).*".*/\1/p' OrcaSlicer/version.inc)
          if [ -z "$BASE_VERSION" ]; then
            echo "Could not parse OrcaSlicer version" >&2
            exit 1
          fi
          VERSION="${BASE_VERSION}${ORCASLICER_SUFFIX}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "arch=amd64" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Use rootless buildkit (fast and safe). Runner is amd64, so no QEMU/emulation.
          driver-opts: image=moby/buildkit:rootless

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Check if image exists in GHCR (deps)
        id: check
        shell: bash
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/orcaslicer-build-deps:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}"
          echo "Checking $IMAGE"
          if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push (stage 'deps' → ghcr)
        if: steps.check.outputs.exists != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: deps
          platforms: linux/amd64
          pull: true
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/orcaslicer-build-deps:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}
          cache-from: |
            type=gha,scope=orca-deps-amd64
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/orcaslicer-build-deps:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}
          cache-to: |
            type=gha,mode=max,scope=orca-deps-amd64
            type=inline
          build-args: |
            CI_MAX_JOBS=${{ inputs.ci_max_jobs }}
          provenance: false

  build-push-orcaslicer:
    runs-on: ubuntu-latest  # native amd64 runner, no emulation
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:rootless

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Derive tag components (version, arch)
        id: meta
        shell: bash
        run: |
          BASE_VERSION=$(sed -nE 's/.*set\(SoftFever_VERSION "([0-9]+\.[0-9]+\.[0-9]+).*".*/\1/p' OrcaSlicer/version.inc)
          if [ -z "$BASE_VERSION" ]; then
            echo "Could not parse OrcaSlicer version" >&2
            exit 1
          fi
          VERSION="${BASE_VERSION}${ORCASLICER_SUFFIX}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "arch=amd64" >> "$GITHUB_OUTPUT"


      - name: Check if image exists in GHCR (orcaslicer)
        id: check
        shell: bash
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/orcaslicer-build:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}"
          echo "Checking $IMAGE"
          if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push (stage 'orcaslicer' → ghcr)
        if: steps.check.outputs.exists != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: orcaslicer
          platforms: linux/amd64
          pull: true
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/orcaslicer-build:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}


      - name: Check if image exists in GHCR (orcaslicer)
        id: check
        shell: bash
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/orcaslicer-build:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}"
          echo "Checking $IMAGE"
          if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

  build-push-cli:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:rootless

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive tag components (version, arch)
        id: meta
        shell: bash
        run: |
          BASE_VERSION=$(sed -nE 's/.*set\(SoftFever_VERSION "([0-9]+\.[0-9]+\.[0-9]+).*".*/\1/p' OrcaSlicer/version.inc)
          if [ -z "$BASE_VERSION" ]; then
            echo "Could not parse OrcaSlicer version" >&2
            exit 1
          fi
          VERSION="${BASE_VERSION}${ORCASLICER_SUFFIX}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "arch=amd64" >> "$GITHUB_OUTPUT"

      - name: Check if image exists in GHCR (cli)
        id: check
        shell: bash
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/orcaslicer-cli:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}"
          echo "Checking $IMAGE"
          if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push (stage 'cli' → ghcr)
        if: steps.check.outputs.exists != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: cli
          platforms: linux/amd64
          pull: true
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/orcaslicer-cli:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}
          cache-from: |
            type=gha,scope=orca-cli-amd64
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/orcaslicer-cli:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/orcaslicer-build:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/orcaslicer-build-deps:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}
          cache-to: |
            type=gha,mode=max,scope=orca-cli-amd64
            type=inline
          build-args: |
            CI_MAX_JOBS=${{ inputs.ci_max_jobs }}
          provenance: false

  build-push-addon:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:rootless

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive tag components (version, arch)
        id: meta
        shell: bash
        run: |
          BASE_VERSION=$(sed -nE 's/.*set\(SoftFever_VERSION "([0-9]+\.[0-9]+\.[0-9]+).*".*/\1/p' OrcaSlicer/version.inc)
          if [ -z "$BASE_VERSION" ]; then
            echo "Could not parse OrcaSlicer version" >&2
            exit 1
          fi
          VERSION="${BASE_VERSION}${ORCASLICER_SUFFIX}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "arch=amd64" >> "$GITHUB_OUTPUT"

      - name: Check if image exists in GHCR (addon)
        id: check
        shell: bash
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/orcaslicer-addon:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}"
          echo "Checking $IMAGE"
          if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi


      - name: Build and push (stage 'addon-slim' → ghcr)
        if: steps.check.outputs.exists != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: addon-slim
          platforms: linux/amd64
          pull: true
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/orcaslicer-addon:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}
          cache-from: |
            type=gha,scope=orca-addon-amd64
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/orcaslicer-addon:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/orcaslicer-build:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/orcaslicer-build-deps:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}
          cache-to: |
            type=gha,mode=max,scope=orca-addon-amd64
            type=inline
          build-args: |
            CI_MAX_JOBS=${{ inputs.ci_max_jobs }}
          provenance: false


