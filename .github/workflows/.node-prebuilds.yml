name: Node addon prebuilds

on:
  workflow_dispatch:
  push:
    branches: [ node-api ]
  pull_request:
    branches: [ node-api ]

jobs:
  prebuild:
    name: Prebuild ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04 ]
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Compute OrcaSlicer submodule SHA
        id: orcasha
        run: |
          echo "ORCA_SHA=$(git rev-parse HEAD:OrcaSlicer || git -C OrcaSlicer rev-parse HEAD)" >> $GITHUB_ENV

      - name: Cache Orca deps downloads (DL_CACHE)
        uses: actions/cache@v4
        with:
          path: OrcaSlicer/deps/DL_CACHE
          key: ${{ runner.os }}-orca-dlcache-${{ env.ORCA_SHA }}
          restore-keys: |
            ${{ runner.os }}-orca-dlcache-

      - name: Cache Orca build outputs
        uses: actions/cache@v4
        with:
          path: |
            OrcaSlicer/build
            OrcaSlicer/deps/build/destdir
          key: ${{ runner.os }}-orca-build-${{ env.ORCA_SHA }}
          restore-keys: |
            ${{ runner.os }}-orca-build-

      - name: Setup Node.js
        if: runner.os != 'Linux'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # --- Build OrcaSlicer + addon inside Docker for Linux ---
      - name: Linux | Build OrcaSlicer + addon inside Docker (Ubuntu 22.04)
        if: runner.os == 'Linux'
        run: |
          docker run --rm \
            -e GITHUB_ACTIONS=true \
            -v "${{ github.workspace }}":/work \
            -w /work \
            ubuntu:22.04 bash -lc '
              set -euo pipefail
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              # Base tools + sudo + build tools required by Orca deps (autoreconf/aclocal, libtool, gettext, texinfo, file)
              apt-get install -y build-essential ninja-build curl git git-lfs pkg-config ca-certificates gnupg cmake sudo autoconf automake libtool gettext texinfo file
              # Node.js 20 (for cmake-js / npm)
              curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
              apt-get install -y nodejs
              git lfs install || true
              git lfs pull || true
              # Limit parallelism to keep memory under control in CI runners
              export CMAKE_BUILD_PARALLEL_LEVEL=1
              export MAKEFLAGS=-j1
              export NINJAFLAGS=-j1
              # Build OrcaSlicer (full)
              cd OrcaSlicer
              chmod +x build_linux.sh
              ./build_linux.sh -u
              ./build_linux.sh -dsi
              # Build addon prebuild
              cd /work/OrcaSlicerCli/bindings/node
              export CMAKE_JS_CMAKE_ARGS="--CDORCACLI_BUILD_NODE_ADDON=ON --CDORCASLICER_ROOT_DIR=/work/OrcaSlicer --CDORCACLI_REQUIRE_LIBS=ON"
              npm ci
              npm run prebuild:all
            '

      - name: macOS | Setup CMake 3.31.x
        if: runner.os == 'macOS'
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.31.7'

      - name: macOS | Install tools required by docs
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install gettext libtool automake autoconf texinfo || true

      - name: macOS | Build OrcaSlicer
        if: runner.os == 'macOS'
        working-directory: OrcaSlicer
        run: |
          chmod +x build_release_macos.sh
          ./build_release_macos.sh

      - name: Windows | Setup CMake 3.31.x
        if: runner.os == 'Windows'
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.31.7'

      - name: Windows | Install required tools
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install strawberryperl git-lfs -y --no-progress
          git lfs install
          git lfs pull

      - name: Windows | Build OrcaSlicer (VS2022)
        if: runner.os == 'Windows'
        shell: cmd
        working-directory: OrcaSlicer
        run: |
          build_release_vs2022.bat

      # --- Build Node addon prebuild ---
      - name: Install npm deps (bindings)
        if: runner.os != 'Linux'
        working-directory: OrcaSlicerCli/bindings/node
        run: npm ci

      - name: Build and stage prebuild
        if: runner.os != 'Linux'
        working-directory: OrcaSlicerCli/bindings/node
        run: npm run prebuild:all

      - name: List staged prebuilds
        working-directory: OrcaSlicerCli/bindings/node
        run: |
          echo "Platform: ${{ runner.os }}"
          ls -R prebuilds || true

      - name: Upload artifact (prebuild)
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-${{ runner.os }}
          path: |
            OrcaSlicerCli/bindings/node/prebuilds/**
          if-no-files-found: error

