name: Node addon prebuilds

on:
  workflow_dispatch:
  push:
    branches: [ node-api ]
  pull_request:
    branches: [ node-api ]


env:
  ORCASLICER_SUFFIX: "a"

jobs:
  prebuild:
    name: Prebuild ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04 ]
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Compute OrcaSlicer submodule SHA
        id: orcasha
        run: |
          echo "ORCA_SHA=$(git rev-parse HEAD:OrcaSlicer || git -C OrcaSlicer rev-parse HEAD)" >> $GITHUB_ENV

      - name: Cache Orca deps downloads (DL_CACHE)
        uses: actions/cache@v4
        with:
          path: OrcaSlicer/deps/DL_CACHE
          key: ${{ runner.os }}-orca-dlcache-${{ env.ORCA_SHA }}
          restore-keys: |
            ${{ runner.os }}-orca-dlcache-

      - name: Cache Orca build outputs
        uses: actions/cache@v4
        with:
          path: |
            OrcaSlicer/build
            OrcaSlicer/deps/build/destdir
          key: ${{ runner.os }}-orca-build-${{ env.ORCA_SHA }}
          restore-keys: |
            ${{ runner.os }}-orca-build-


      - name: Derive tag components (version, arch)
        id: meta
        shell: bash
        run: |
          BASE_VERSION=$(sed -nE 's/.*set\(SoftFever_VERSION "([0-9]+\.[0-9]+\.[0-9]+).*".*/\1/p' OrcaSlicer/version.inc)
          if [ -z "$BASE_VERSION" ]; then
            echo "Could not parse OrcaSlicer version" >&2
            exit 1
          fi
          VERSION="${BASE_VERSION}${ORCASLICER_SUFFIX}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "arch=amd64" >> "$GITHUB_OUTPUT"

      - name: Check if deps image exists in GHCR
        id: depscheck
        shell: bash
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/orcaslicer-build-deps:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}"
          echo "Checking $IMAGE"
          if docker buildx imagetools inspect "$IMAGE" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi


      # --- Build OrcaSlicer + addon inside Docker for Linux ---
      - name: Linux | Build OrcaSlicer + addon inside Docker (Ubuntu 22.04)
        if: runner.os == 'Linux' && steps.depscheck.outputs.exists != 'true'
        run: |
          docker run --rm \
            -e GITHUB_ACTIONS=true \
            -v "${{ github.workspace }}":/work \
            -w /work \
            ubuntu:22.04 bash -lc '
              set -euo pipefail
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              # Base tools + sudo + build tools required by Orca deps (autoreconf/aclocal, libtool, gettext, texinfo, file)
              apt-get install -y build-essential ninja-build curl git git-lfs pkg-config ca-certificates gnupg cmake sudo autoconf automake libtool gettext texinfo file
              # Node.js 20 (for cmake-js / npm)
              curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
              apt-get install -y nodejs
              git lfs install || true
              git lfs pull || true
              # Limit parallelism to keep memory under control in CI runners
              export CMAKE_BUILD_PARALLEL_LEVEL=1
              export MAKEFLAGS=-j1
              export NINJAFLAGS=-j1
              # Build OrcaSlicer (full)
              cd OrcaSlicer
              chmod +x build_linux.sh
              ./build_linux.sh -u
              ./build_linux.sh -dsi
              # Build addon prebuild
              cd /work/OrcaSlicerCli/bindings/node
              export CMAKE_JS_CMAKE_ARGS="--CDORCACLI_BUILD_NODE_ADDON=ON --CDORCASLICER_ROOT_DIR=/work/OrcaSlicer --CDORCACLI_REQUIRE_LIBS=ON"
              npm ci
              npm run prebuild:all
            '

      - name: Linux | Skip (deps image exists in GHCR)
        if: runner.os == 'Linux' && steps.depscheck.outputs.exists == 'true'
        run: echo "Skipping Linux build: deps image exists in GHCR: ghcr.io/${{ github.repository_owner }}/orcaslicer-build-deps:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}"







      - name: List staged prebuilds
        if: runner.os == 'Linux' && steps.depscheck.outputs.exists != 'true'
        working-directory: OrcaSlicerCli/bindings/node
        run: |
          echo "Platform: ${{ runner.os }}"
          ls -R prebuilds || true

      - name: Upload artifact (prebuild)
        if: runner.os == 'Linux' && steps.depscheck.outputs.exists != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-${{ runner.os }}
          path: |
            OrcaSlicerCli/bindings/node/prebuilds/**
          if-no-files-found: error

