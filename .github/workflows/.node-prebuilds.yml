name: Node addon prebuilds

on:
  workflow_dispatch:
  push:
    branches: [ node-api ]
  pull_request:
    branches: [ node-api ]


env:
  ORCASLICER_SUFFIX: "a"

jobs:
  prebuild:
    name: Prebuild ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04 ]
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Compute OrcaSlicer submodule SHA
        id: orcasha
        run: bash "$GITHUB_WORKSPACE/scripts/ci/compute_orca_sha.sh"



      - name: Derive tag components (version, arch)
        id: meta
        shell: bash
        run: bash "$GITHUB_WORKSPACE/scripts/ci/derive_meta.sh"

      - name: Check if deps image exists in GHCR
        id: depscheck
        shell: bash
        run: bash "$GITHUB_WORKSPACE/scripts/ci/check_image_exists.sh" "ghcr.io/${{ github.repository_owner }}/orcaslicer-build-deps:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}"


      - name: Check if core image exists in GHCR
        id: corecheck
        shell: bash
        run: bash "$GITHUB_WORKSPACE/scripts/ci/check_image_exists.sh" "ghcr.io/${{ github.repository_owner }}/orcaslicer-core:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}"


      - name: Check if CLI image exists in GHCR
        id: clicheck
        shell: bash
        run: bash "$GITHUB_WORKSPACE/scripts/ci/check_image_exists.sh" "ghcr.io/${{ github.repository_owner }}/orcaslicer-cli:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}"

      - name: Set up Docker Buildx
        if: runner.os == 'Linux'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: runner.os == 'Linux' && (steps.depscheck.outputs.exists != 'true' || steps.corecheck.outputs.exists != 'true' || steps.clicheck.outputs.exists != 'true')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push deps image (GHCR)
        if: runner.os == 'Linux' && steps.depscheck.outputs.exists != 'true'
        run: bash "$GITHUB_WORKSPACE/scripts/ci/build_deps_image.sh" "ghcr.io/${{ github.repository_owner }}/orcaslicer-build-deps:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}"

      - name: Build and push core image (GHCR)
        if: runner.os == 'Linux' && steps.corecheck.outputs.exists != 'true'
        run: bash "$GITHUB_WORKSPACE/scripts/ci/build_core_image.sh" "ghcr.io/${{ github.repository_owner }}/orcaslicer-core:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}" "ghcr.io/${{ github.repository_owner }}/orcaslicer-build-deps:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}"


      - name: Build and push orcaslicer-cli image (GHCR)
        if: runner.os == 'Linux' && steps.clicheck.outputs.exists != 'true'
        run: bash "$GITHUB_WORKSPACE/scripts/ci/build_cli_image.sh" "ghcr.io/${{ github.repository_owner }}/orcaslicer-cli:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}" "ghcr.io/${{ github.repository_owner }}/orcaslicer-core:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.arch }}"


      - name: Cache Orca deps downloads (DL_CACHE)
        if: runner.os == 'Linux' && steps.depscheck.outputs.exists != 'true'
        uses: actions/cache@v4
        with:
          path: OrcaSlicer/deps/DL_CACHE
          key: ${{ runner.os }}-orca-dlcache-${{ env.ORCA_SHA }}
          restore-keys: |
            ${{ runner.os }}-orca-dlcache-

      - name: Cache Orca build outputs
        if: runner.os == 'Linux' && steps.depscheck.outputs.exists != 'true'
        uses: actions/cache@v4
        with:
          path: |
            OrcaSlicer/build
            OrcaSlicer/deps/build/destdir
          key: ${{ runner.os }}-orca-build-${{ env.ORCA_SHA }}
          restore-keys: |
            ${{ runner.os }}-orca-build-


      # --- Build OrcaSlicer + addon inside Docker for Linux ---
      - name: Linux | Build OrcaSlicer + addon inside Docker (Ubuntu 22.04)
        if: runner.os == 'Linux' && steps.depscheck.outputs.exists != 'true'
        run: bash "$GITHUB_WORKSPACE/scripts/ci/linux_build_inside_docker.sh" "$GITHUB_WORKSPACE"

      - name: Linux | Skip (deps image exists in GHCR)
        if: runner.os == 'Linux' && steps.depscheck.outputs.exists == 'true'
        run: bash "$GITHUB_WORKSPACE/scripts/ci/skip_linux_due_to_existing_deps.sh" "${{ steps.meta.outputs.version }}" "${{ steps.meta.outputs.arch }}" "${{ github.repository_owner }}"







      - name: List staged prebuilds
        if: runner.os == 'Linux' && steps.depscheck.outputs.exists != 'true'
        working-directory: OrcaSlicerCli/bindings/node
        run: bash "$GITHUB_WORKSPACE/scripts/ci/list_staged_prebuilds.sh"

      - name: Upload artifact (prebuild)
        if: runner.os == 'Linux' && steps.depscheck.outputs.exists != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-${{ runner.os }}
          path: |
            OrcaSlicerCli/bindings/node/prebuilds/**
          if-no-files-found: error

